openapi: 3.0.1
info:
  version: '1.0'
  title: Order service
servers:
  - url: '/api/v1/order-service'
tags:
  - name: Order Management
    description: Operations with Order entities
  - name: User Managment
    description: Operations with users
  - name: Dictionary
paths:
  /order:
    post:
      tags:
        - Order Management
      summary: Create Order
      description: Create order
      operationId: create
      requestBody:
        $ref: '#/components/requestBodies/OrderRequest'
      responses:
        '200':
          description: Created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
  /order/{id}:
    get:
      tags:
        - Order Management
      summary: Get Order
      description: Get Order by id
      operationId: get
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Ok. Order successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '404':
          description: Order not found
    put:
      tags:
        - Order Management
      summary: Update Order
      description: Update Order
      operationId: update
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/OrderRequest'
      responses:
        '200':
          description: Ok. Updated order successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
    delete:
      tags:
        - Order Management
      summary: Delete Order
      description: Delete Order
      operationId: delete
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Ok. Order successfully deleted

  /orders:
    get:
      tags:
        - Order Management
      summary: Get all orders
      description: Get all orders
      operationId: getAllOrders
      responses:
        '200':
          description: All existing orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'

  /order/{id}/payment:
    post:
      tags:
        - Order management
      summary: Pay for the order
      description: Performs payment
      parameters:
        - $ref: '#/components/parameters/id'
      operationId: pay
      responses:
        '200':
          description: Ok. Order is successfully paid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
  /dict/orderStatus:
    get:
      tags:
        - Dictionary
      summary: Get possible order statuses
      description: Get all order statuses
      operationId: getAllOrderStatus
      responses:
        '200':
          description: All existing order statuses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'

  /dict/shippingTypes:
    get:
      tags:
        - Dictionary
      summary: Get all possible shipping types
      description: Get all shipping types
      operationId: getAllShippingTypes
      responses:
        '200':
          description: All existing shipping types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingType'

  /user/{id}:
    get:
      tags:
        - User Management
      summary: Get User
      description: Get User by id
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
    put:
      tags:
        - User Management
      summary: Add User
      description: Update User
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    delete:
      tags:
        - User Management
      summary: Delete User
      description: Delete User
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Ok. User successfully deleted

  /user:
    post:
      tags:
        - User Management
      summary: Add User
      description: Add User
      operationId: addUser
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'
      responses:
        '200':
          description: Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    get:
      tags:
        - User Management
      summary: Get Users
      description: Get all Users
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
components:
  parameters:
    id:
      name: id
      in: path
      description: Order (or User) ID
      required: true
      schema:
        type: string
  requestBodies:
    OrderRequest:
      description: Order request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderDto'
    UserRequest:
      description: User request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDto'
  schemas:
    OrderDto:
      type: object
      properties:
        id:
          description: Unique Identifier of Order.
          type: string
          readOnly: true
        name:
          description: Name of Order.
          type: string
          maxLength: 100
        customerId:
          type: integer
        total:
          type: number
          format: float
        shippingType:
          $ref: '#/components/schemas/ShippingType'
        status:
          $ref: '#/components/schemas/OrderStatus'
        products:
          type: object
          additionalProperties:
            type: integer
        paymentId:
          type: integer
      required:
        - name
        - customerId
        - total
        - shippingType
        - status
        - products
    UserDto:
      type: object
      properties:
        id:
          description: Unique Identifier of User
          type: string
          readOnly: true
        name:
          description: Name of User.
          type: string
          maxLength: 100
        contact:
          description: Contact of User.
          type: string
          maxLength: 100
        orders:
          description: List of User's orders
          type: array
          items:
            type: string

    ShippingType:
      type: string
      enum:
        - AT_SHOP
        - DELIVERY

    OrderStatus:
      type: string
      enum:
        - IN_PROGRESS
        - DELIVERED
        - PAID
        - COLLECTING